# -*- coding: utf-8 -*-
"""DroneCode2/29/2024.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qnVtdv6_8NnlbYIWq0YnWdrCCXDdgdeJ
"""

import numpy as np
import cv2
import cvlib
import matplotlib as plt

####################### STEP 1: BACKGOUND REMOVAL #######################

# Infrared Picture Function
def load_infrared_cleaned_image(image_number):


    # Prepping function
    image_number = str(image_number)
    window_name = "image"

    # Inserting unique path (obviously we will each have a unique path here)
    # Make sure that you have the second backslash VV
    path = r"C:\Users\bbrec\Downloads\data11\data11\\" + image_number + ".bmp"
    image = cv2.imread(path)

    # Resizing the image. Got from ChatGPT
    new_size = (700, 600)  # Specify the new dimensions
    resized_image = cv2.resize(image, new_size)

    # Converting the image to infrared. Got from ChatGPT
    grayscale_image = cv2.cvtColor(resized_image, cv2.COLOR_BGR2GRAY)
    infrared_image = cv2.applyColorMap(grayscale_image, cv2.COLORMAP_HOT)  # You can try other colormaps as well


    # Creating the median image
    median_image = cv2.medianBlur(infrared_image,11)

    # Subtracting the median image from the infrared image in order to make the drone stand out more.
    final_image = cv2.subtract(infrared_image,median_image)

    # Options for showing other pics in the cleaning process
    #cv2.imshow(window_name,resized_image)

    #cv2.imshow(window_name, infrared_image)

    #cv2.imshow(window_name, final_image)
    cv2.waitKey(0)
    cv2.destroyAllWindows()
    return resized_image


# Grayscale image function. This function is the exact same as above it just returns a grayscale image instead of an infrared
def load_grayscale_cleaned_image(image_number):
    image_number = str(image_number)
    window_name = "image"
    path = r"C:\Users\bbrec\Downloads\data11\data11\\" + image_number + ".bmp"
    image = cv2.imread(path)
    # Resizing the image. Got from ChatGPT
    new_size = (700, 600)
    resized_image = cv2.resize(image, new_size)
    #  Got from ChatGPT
    grayscale_image = cv2.cvtColor(resized_image, cv2.COLOR_BGR2GRAY)
    median_image = cv2.medianBlur(grayscale_image,11)
    final_image = cv2.subtract(grayscale_image,median_image)
    # Options for showing other pics in the cleaning process
    #cv2.imshow(window_name,resized_image)
    #cv2.imshow(window_name, infrared_image)
    #cv2.imshow(window_name, final_image)
    new_grey = final_image
    cv2.waitKey(0)
    cv2.destroyAllWindows()
    return new_grey

####################### STEP 2: OBJECT DETECTION #######################

# This is the Naive function for finding the drone. Naive means this is simply looking for the brightest pixel in the image
# as opposed to the brightest group of pixels. When orginally tested had an 80% accuracy rate of finding t
def findDroneNaive(pic):

    # Loading the images using the other functions
    gray = load_grayscale_cleaned_image(pic)
    firstImage = load_infrared_cleaned_image(pic)

    # Locating the brightest pixel in the image
    (minVal,maxVal,minLoc,maxLoc) = cv2.minMaxLoc(gray)

    # Drawing the circle around the brightest pixel
    cv2.circle(firstImage, maxLoc, 25, (0,255,0),1)

    # Showing the image
    cv2.imshow("Naive",firstImage)
    cv2.waitKey(0)
    cv2.destroyAllWindows()

# Loops through and shows the images with a green circle around them.
i=0
while i < 2:
    findDroneNaive(i)
    i+=1

# This is the Robust function. ideally this function finds the brightest region in the picture. Still needs some fine
# tuning but overall works better than the Naive function with a 85% accuracy rate on the same photos which are the first twenty
# photos from the data11 dataset.
def findDroneRobust(picNumber):

    # Loading the images
    gray = load_grayscale_cleaned_image(picNumber)
    orig = load_infrared_cleaned_image(picNumber)

    # Implementing the Gaussian Blur which causes the computer to look at the birghtest regions of the image rather than
    # the single brightest pixel.
    gray2 = cv2.GaussianBlur(gray, (5, 5), 0)

    # Finding the brightest region
    (minVal, maxVal, minLoc, maxLoc) = cv2.minMaxLoc(gray2)
    image = orig.copy()

    # Drawing the circle
    cv2.circle(image, maxLoc, 25, (100,255,100), 1)

    # Showing the circle
    cv2.imshow("Robust", image)
    cv2.waitKey(0)
    cv2.destroyAllWindows()

# This whole loops loops through and shows the images with a green circle around them.
i=0
while i < 2:
    findDroneRobust(i)
    i+=1

####################### STEP 3: OBJECT TRACKING #######################